{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","i","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAGaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAI,KACnE,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCLjBC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SAECD,EAAMS,SAASC,KAAK,SAACP,EAAQQ,GAAT,OAAe,cAAC,EAAD,CAAgBR,QAASA,GAAZQ,SCH5CC,G,MAAY,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aACnC,OACI,uBACIC,KAAK,SACLF,YAAcA,EACdG,SAAUF,EACVb,UAAU,aCoCPgB,E,kDAvCb,aAAc,IAAD,8BACX,gBAcFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAbpC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALJ,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAASmB,S,oBAOzC,WAAS,IAAD,EACyBC,KAAKN,MAA7Bd,EADD,EACCA,SAASW,EADV,EACUA,YACVU,EAAmBrB,EAASsB,QAAO,SAAC5B,GAAD,OACvCA,EAAQG,KAAK0B,cAAcC,SAASb,EAAYY,kBAIlD,OACE,sBAAK/B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEY,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUL,SAAYqB,W,GAlCZI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f96ee4f4.chunk.js","sourcesContent":["import './card.styles.css'\n\n\nexport const Card = (props) => {\n    return (\n        <div className='card-container'>\n            <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt=\"\"/>\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n} ","import './card-list.styles.css'\nimport {Card} from '../card/card.component'\n\nexport const CardList = (props) => {\n    return (\n        <div className='card-list' > \n        {\n         props.monsters.map( (monster,i) => <Card key = {i} monster={monster}/> )\n        }\n        </div>\n    )\n}\n\n","import './search-box.styles.css'\n\n\n\nexport const SearchBox = ({placeholder,handleChange}) => {\n    return(\n        <input \n            type=\"search\" \n            placeholder= {placeholder}\n            onChange={handleChange}\n            className='search'\n        />\n    )\n}","import {Component} from 'react'\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\n\nclass App extends Component{\n  constructor(){\n    super()\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => this.setState({monsters:users}))\n  } \n\n  handleChange = e => {\n    this.setState({searchField:e.target.value})\n  }\n\n  render(){\n    const {monsters,searchField} = this.state\n    const filteredMonsters = monsters.filter((monster) => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox \n          placeholder='Search Monsters' \n          handleChange={this.handleChange}\n        />\n        <CardList monsters = {filteredMonsters}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}